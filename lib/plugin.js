// Generated by CoffeeScript 1.7.1
var diveSync, fs, path, _;

_ = require('lodash');

fs = require('fs');

path = require('path');

diveSync = require('diveSync');

module.exports = function(env, done) {
  var MounterGenerator, defaults, options;
  defaults = {
    options: {
      allow: /(\.js|\.coffee|\.map)$/
    },
    mounts: {
      '/vendor/': {
        src: './bower_components'
      }
    }
  };
  options = _.merge(defaults, env.config.bower || {});
  MounterGenerator = (function() {
    function MounterGenerator(contents, options, callback) {
      var config, files, key, tree, value, _i, _len, _ref;
      tree = [];
      _ref = options.mounts;
      for (value = _i = 0, _len = _ref.length; _i < _len; value = ++_i) {
        key = _ref[value];
        config = _.merge(defaults.options, value);
        files = this.discover(config);
        tree.push(this.mount(files));
      }
      callback(null, {
        mounts: tree
      });
    }

    MounterGenerator.prototype.discover = function(options) {
      var output, pattern, target;
      target = path.resolve(env.workDir, options.src);
      pattern = new RegExp(options.allow);
      output = [];
      diveSync(target, (function(_this) {
        return function(err, file) {
          if (err) {
            throw err;
          }
          if (pattern.test(file)) {
            return output.push(file);
          }
        };
      })(this));
      return output;
    };

    MounterGenerator.prototype.mount = function(options, files) {
      var file, full, mounted, output, relative, _i, _len, _results;
      output = {};
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        relative = file.replace(env.workDir, '.');
        mounted = path.join(options.mount, relative.replace(options.root, ''));
        full = path.resolve(env.workDir, relative);
        _results.push(output[mounted] = new env.plugins.StaticFile({
          relative: mounted,
          full: full
        }));
      }
      return _results;
    };

    return MounterGenerator;

  })();
  env.registerGenerator('bower', function(contents, callback) {
    return new BowerGenerator(contents, options, callback);
  });
  return done();
};
