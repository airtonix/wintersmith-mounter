// Generated by CoffeeScript 1.7.1
var diveSync, fs, path, _;

_ = require('lodash');

fs = require('fs');

path = require('path');

diveSync = require('diveSync');

module.exports = function(env, done) {
  var MounterGenerator, defaults, options;
  defaults = {
    options: {
      allow: /(\.js|\.coffee|\.map)$/
    },
    mounts: {}
  };
  options = _.merge(defaults, env.config.mounter || {});
  MounterGenerator = (function() {
    function MounterGenerator(contents, callback) {
      var tree;
      tree = [];
      _.forEach(options.mounts, (function(_this) {
        return function(value, mount) {
          var config, files, mountedTree;
          config = _.merge(defaults.options, value);
          files = _this.discover(config);
          mountedTree = _this.mount(mount, files, config);
          return tree = tree.concat(mountedTree);
        };
      })(this));
      callback(null, {
        mounts: tree
      });
    }

    MounterGenerator.prototype.discover = function(config) {
      var output, pattern, target;
      target = path.resolve(env.workDir, config.src);
      pattern = new RegExp(config.allow);
      output = [];
      diveSync(target, (function(_this) {
        return function(err, file) {
          if (err) {
            throw err;
          }
          if (pattern.test(file)) {
            return output.push(file);
          }
        };
      })(this));
      return output;
    };

    MounterGenerator.prototype.mount = function(mount, files, config) {
      var file, full, mounted, output, relative, _i, _len, _results;
      output = {};
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        relative = file.replace(env.workDir, '.');
        mounted = path.join(mount, relative.replace(config.src, ''));
        full = path.resolve(env.workDir, relative);
        _results.push(output[mounted] = new env.plugins.StaticFile({
          relative: mounted,
          full: full
        }));
      }
      return _results;
    };

    return MounterGenerator;

  })();
  env.registerGenerator('mounter', function(contents, callback) {
    return new MounterGenerator(contents, callback);
  });
  return done();
};
